<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ilya's code and more</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-07-31T20:00:00+08:00</updated><entry><title>Low cost Digital Signage with RaspberryPi and Screenly OSE</title><link href="/low-cost-digital-signage-with-raspberrypi-and-screenly-ose.html" rel="alternate"></link><published>2017-07-31T20:00:00+08:00</published><updated>2017-07-31T20:00:00+08:00</updated><author><name>Ilya Mochalov</name></author><id>tag:None,2017-07-31:/low-cost-digital-signage-with-raspberrypi-and-screenly-ose.html</id><summary type="html">&lt;p&gt;Awesome project that shows how to build cheap digital signage for your school, company or event.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Low cost Digital Signage with RaspberryPi and Screenly OSE&lt;/h1&gt;
&lt;p&gt;This article will show you how everyone can easily build cheap digital signage project with minimal time and money investments&lt;/p&gt;
&lt;h2&gt;1. Project description&lt;/h2&gt;
&lt;p&gt;If you need a digital signage solution which is low cost, open sourced, robust and easy to setup then you are reading right article. Screenly OSE will allow you create playlist with pictures, web-pages and even videos.
There are only few things that you will need for this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.raspberrypi.org/"&gt;RaspberryPI&lt;/a&gt; &lt;a href="https://www.raspberrypi.org/products/#buy-now-modal"&gt;3 Model B&lt;/a&gt;, which is $35 one board computer;&lt;/li&gt;
&lt;li&gt;Latest &lt;a href="https://www.screenly.io/ose/"&gt;Screenly OSE&lt;/a&gt; custom image;&lt;/li&gt;
&lt;li&gt;A display or TV or any other screen with HDMI port;&lt;/li&gt;
&lt;li&gt;An SD Card (&amp;gt;4GB). Class 10 is highly recommended;&lt;/li&gt;
&lt;li&gt;An HDMI-cable;&lt;/li&gt;
&lt;li&gt;A network connection (with DHCP);&lt;/li&gt;
&lt;li&gt;A keyboard (needed for initial configuration)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Installation&lt;/h2&gt;
&lt;p&gt;The fastest and easiest way to install ScreenlyOSE is by downloading custom image &lt;a href="https://github.com/screenly/screenly-ose/releases"&gt;here&lt;/a&gt; (more ways of installation is described on &lt;a href="https://www.screenly.io/ose/"&gt;this page&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download Screenly OSE disk image from: &lt;a href="https://github.com/screenly/screenly-ose/releases"&gt;GitHub Repository&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Write image to SD card either with &lt;a href="https://etcher.io/"&gt;Etcher&lt;/a&gt;(recomended) or following official &lt;a href="https://www.raspberrypi.org/documentation/installation/installing-images/"&gt;instruction&lt;/a&gt;(skip download image section and start with choosing OS of your operation PC)&lt;/li&gt;
&lt;li&gt;Once image is written onto SD card, please place into RaspberryPi slot, plug in HDMI, keyboard and power on your board &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Tweaking configurations&lt;/h2&gt;
&lt;h3&gt;3.1 System configuration&lt;/h3&gt;
&lt;p&gt;If you successfully followed all steps in part 2, then now you should see screen similar to one below:&lt;/p&gt;
&lt;p&gt;SCREEN PICTURE HERE&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Ctrl+Alt+F1&lt;/code&gt; to show command line interface that look like this:&lt;/p&gt;
&lt;p&gt;SCREEN PICTURE HERE&lt;/p&gt;</content><category term="RaspberryPi"></category></entry><entry><title>Serving static content with Nginx</title><link href="/serving-static-content-with-nginx.html" rel="alternate"></link><published>2017-07-29T22:01:00+08:00</published><updated>2017-07-29T22:01:00+08:00</updated><author><name>Ilya Mochalov</name></author><id>tag:None,2017-07-29:/serving-static-content-with-nginx.html</id><summary type="html">&lt;p&gt;This tutorial describes how to use NGINX to serve static content.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Serving static content with Nginx&lt;/h1&gt;
&lt;p&gt;Below is an example of app server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;running on a 8080 port,&lt;/li&gt;
&lt;li&gt;client asks assets at &lt;code&gt;/static/&lt;/code&gt; path,&lt;/li&gt;
&lt;li&gt;assets are located at &lt;code&gt;/var/www/example.com/current/static/&lt;/code&gt; directory,&lt;/li&gt;
&lt;li&gt;you would like to serve assets via Ngnix but proxy other requests to the app server running at 8080 port.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;http_backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/example_com_access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/example_com_error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/var/www/example.com/current/static/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="s"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;add_header&lt;/span&gt; &lt;span class="s"&gt;Cache-Control&lt;/span&gt; &lt;span class="s"&gt;public&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://http_backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$http_host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="nginx"></category></entry><entry><title>SSL with Let's Encrypt &amp; Nginx on Debian Jessie</title><link href="/ssl-with-lets-encrypt-nginx-on-debian-jessie.html" rel="alternate"></link><published>2017-07-21T22:00:00+08:00</published><updated>2017-07-21T22:00:00+08:00</updated><author><name>Ilya Mochalov</name></author><id>tag:None,2017-07-21:/ssl-with-lets-encrypt-nginx-on-debian-jessie.html</id><summary type="html">&lt;p&gt;Simple and free way to secure your web service.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;SSL with Let's Encrypt &amp;amp; Nginx on Debian Jessie.&lt;/h1&gt;
&lt;h2&gt;About SSL&lt;/h2&gt;
&lt;p&gt;SSL (Secure Sockets Layer) or TLS (Transport Layer Security) are protocols that helps you to secure connection to your web-resource. TLS/SSL certificates enable encrypted HTTPS on web servers.
There are various ways to set HTTPS, but in this quick tutorial I will show you my workflow with &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; on Debian Jessie (or any other debian linux distro, Ubuntu for example) with Nginx web server.&lt;/p&gt;
&lt;h2&gt;About Let's encrypt&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt; is a new Certificate Authority (CA) that provides an easy way to obtain and install free TLS/SSL certificates. If you want to obtain certificate from Let's Encrypt you will have to demonstrate that you have control over your domain.&lt;/p&gt;
&lt;p&gt;To prove that domain is ours we will have to create folder dedicated for online challenge, configure Nginx to have access to that folder. So, when we run Let's Encrypt challenge it first creates a file in mentioned previously folder and then the AC part of Let's Encrypt will try remotely access that file on your server. If Nginx configured correct and points to right folder when AC () asks for access, you pass challenge and Let's encrypt create certificates for your domain name.&lt;/p&gt;
&lt;h2&gt;Configuration of Let's Encrypt &amp;amp; Nginx&lt;/h2&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SSH access to your web server&lt;/li&gt;
&lt;li&gt;Nginx &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-debian-8"&gt;installed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Let's encrypt installation and obtaining of certificates&lt;/h3&gt;
&lt;p&gt;1) Install let's encrypt code and prepare the environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install certbot -t jessie-backports
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) Create a folder for the online challenge where we prove that domain name belongs to us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /srv/www/le/domain.name.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) Configure your Nginx to prepare for online challenge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;domain.name.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/.well-known/acme-challenge&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/srv/www/le/domain.name.com/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;don't forger to reload your Nginx to enable new configurations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl reload nginx.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4) Run online challenge to create certificates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo certbot certonly --webroot -w /srv/www/le/domian.name.com -d domian.name.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in this command &lt;code&gt;/srv/www/le/domian.name.com&lt;/code&gt; is a dedicated folder where Let's Encrypt palce file so AC can check it remotely and determine is domain is over our control.&lt;/p&gt;
&lt;p&gt;If challenge went well you will see output similar to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;IMPORTANT NOTES:
- Congratulations! Your certificate and chain have been saved at
/etc/letsencrypt/live/domian.name.com/fullchain.pem. Your cert
will expire on &lt;span class="m"&gt;2017&lt;/span&gt;-07-26. To obtain a new or tweaked version of
this certificate in the future, simply run certbot again. To
non-interactively renew *all* of your certificates, run &lt;span class="s2"&gt;&amp;quot;certbot&lt;/span&gt;
&lt;span class="s2"&gt;renew&amp;quot;&lt;/span&gt;
- If you lose your account credentials, you can recover through
e-mails sent to sammy@example.com.
- Your account credentials have been saved in your Certbot
configuration directory at /etc/letsencrypt. You should make a
secure backup of this folder now. This configuration directory will
also contain certificates and private keys obtained by Certbot so
making regular backups of this folder is ideal.
- If you like Certbot, please consider supporting our work by:

Donating to ISRG / Let&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s Encrypt:   https://letsencrypt.org/donate
Donating to EFF:                    https://eff.org/donate-le
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5) Configure SSL part in Nginx&lt;/p&gt;
&lt;p&gt;First we need to redirect all HTTP requsts to HTTPS, by adding following to Nginx configs at HTTP part&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$server_name$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Second we need to add block for HTTPS to Nginx configs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;domain.name.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;ssl_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/domain.name.com/fullchain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/domain.name.com/privkey.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_trusted_certificate&lt;/span&gt; &lt;span class="s"&gt;/etc/letsencrypt/live/domain.name.com/chain.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/.well-known/acme-challenge&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/srv/www/le/domain.name.com/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;....&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Certificates renewal&lt;/h3&gt;
&lt;p&gt;To renew all the certificate, simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo certbot --force-renewal renew
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To list certs due for renewal, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo certbot --dry-run renew
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make life easier I have a cron at &lt;code&gt;/etc/cron.d/sertbot&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# /etc/cron.d/certbot: crontab entries for the certbot package&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Upstream recommends attempting renewal twice a day&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Eventually, this will be an opportunity to validate certificates&lt;/span&gt;
&lt;span class="c1"&gt;# haven&amp;#39;t been revoked, etc.  Renewal will only occur if expiration&lt;/span&gt;
&lt;span class="c1"&gt;# is within 30 days.&lt;/span&gt;
&lt;span class="nv"&gt;SHELL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/sh
&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

&lt;span class="m"&gt;0&lt;/span&gt; */12 * * * root &lt;span class="nb"&gt;test&lt;/span&gt; -x /usr/bin/certbot -a &lt;span class="se"&gt;\!&lt;/span&gt; -d /run/systemd/system &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; perl -e &lt;span class="s1"&gt;&amp;#39;sleep int(rand(3600))&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; certbot -q renew
&lt;/pre&gt;&lt;/div&gt;</content><category term="nginx"></category><category term="SSL"></category></entry><entry><title>How to Use Nginx's map Module</title><link href="/how-to-use-nginxs-map-module.html" rel="alternate"></link><published>2017-07-13T15:00:00+08:00</published><updated>2017-07-13T15:00:00+08:00</updated><author><name>Ilya Mochalov</name></author><id>tag:None,2017-07-13:/how-to-use-nginxs-map-module.html</id><summary type="html">&lt;p&gt;Short tutorial on using nginx map module.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;How to Use Nginx's map Module.&lt;/h1&gt;
&lt;p&gt;Sometimes we need to redirect old URI of our web service to new URI, without changing our legacy frontend. I will walk you through Nginx's map Module that can be used to achieve our goal.&lt;/p&gt;
&lt;h2&gt;Step 1 – Creating map file&lt;/h2&gt;
&lt;p&gt;Create file called uri_map at root folder (&lt;em&gt;/etc/nginx/uri_map&lt;/em&gt;) of Nginx and fill it in with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/old/uri1   /new/uri1;
…
/old/uriX   /new/uriX;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where two pars represent old and new URI, separated with TAB.&lt;/p&gt;
&lt;h2&gt;Step 2 – Edit configuration file&lt;/h2&gt;
&lt;p&gt;Include following text at the top of your nginx.conf configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map $uri $new_uri {
    include /etc/nginx/uri_map;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and following text to server block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
    listen 80;
    server_name XXX;
    ...
    # Old static views redirect
    if ($new_uri) {
        rewrite ^ $new_uri permanent;
    }
    ...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 3 - Reload nginx&lt;/h2&gt;
&lt;p&gt;Use follwoing command to reload nginx configurations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl reload nginx.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check if redirection works with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -I domain.name.com/old/uri
HTTP/1.1 &lt;span class="m"&gt;301&lt;/span&gt; Moved Permanently
Server: nginx/1.10.3
Date: Sat, &lt;span class="m"&gt;15&lt;/span&gt; Jul &lt;span class="m"&gt;2017&lt;/span&gt; &lt;span class="m"&gt;05&lt;/span&gt;:18:55 GMT
Content-Type: text/html
Content-Length: &lt;span class="m"&gt;185&lt;/span&gt;
Connection: keep-alive
Location: https://domain.name.com/old/uri1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Happy codding!&lt;/p&gt;</content><category term="nginx"></category></entry><entry><title>My very first post</title><link href="/my-very-first-post.html" rel="alternate"></link><published>2017-06-28T22:01:00+08:00</published><updated>2017-06-28T22:01:00+08:00</updated><author><name>Ilya Mochalov</name></author><id>tag:None,2017-06-28:/my-very-first-post.html</id><summary type="html">&lt;p&gt;Starting Is The Hardest Part.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;My very first blog post. Motivation.&lt;/h1&gt;
&lt;p&gt;I am both excited and thrilled to start this blog. This would be my first blogging experience. Main motivation for starting this project is to share my technical experience dealing with various IT tools that I use at work and as hobby.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;“You should never take more than you give”&lt;/strong&gt; (The Lion King - "Circle of Life” soundtrack)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This one of my best quotes and I try to live in accordance. So, writing this blog I want to make my contribution to IT community online as well as, I am looking for feedback from my readers.&lt;/p&gt;</content><category term="general"></category></entry></feed>